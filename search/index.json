[{"content":"在之前搭建好aarch64工作环境的基础上，可以进行一系列开发调试工作，本文记录在qemu上使用gdb调试aarch64架构的linux内核代码。\n调试环境 rootfs：\t基于BusyBox 1.34.1，自制 linux：\t6.0.12 qemu：\t7.2.0 gdb：\t12.1 运行环境：win11下的wsl2 linux 编译 wget https://mirrors.edge.kernel.org/pub/linux/kernel/v6.x/linux-6.0.12.tar.gz tar -xvf linux-6.0.12.tar.gz cd linux-6.0.12 make CROSS_COMPILE=aarch64-linux-gnu- ARCH=arm64 defconfig 关闭地址随机化\nmake CROSS_COMPILE=aarch64-linux-gnu- ARCH=arm64 menuconfig Kernel Features ---\u0026gt; [ ] Randomize the address of the kernel image 编译\nmake -j64 自制rootfs根文件系统 编译 busybox\n# 下载 wget https://busybox.net/downloads/busybox-1.34.1.tar.bz2 tar xvf busybox-1.34.1.tar.bz2 cd busybox-1.34.1 # aarch64 config make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- defconfig # 设置为静态链接 make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- menuconfig Settings ---\u0026gt; [*] Build static binary (no shared libs) # 编译 make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j64 制作rootfs\n# 创建一个大小为64M，格式为ext4的rootfs镜像 dd if=/dev/zero of=rootfs.img bs=1M count=64 mkfs.ext4 rootfs.img # 将rootfs镜像挂载到rootfs目录（挂载点），方便操作镜像内容 make rootfs sudo mount -t ext4 -o loop rootfs.img ./rootfs # 将编译好的busybox安装到rootfs中，其实大部分也是复制操作，只是make install会根据根目录下的Makefile中的install目标，来执行指定操作。 sudo make install CONFIG_PREFIX=./rootfs cd rootfs # 创建必要的系统目录 sudo mkdir proc dev etc home mnt tmp run sys dev/pts dev/shm # 复制必要的自启动脚本 sudo cp -r ../examples/bootfloppy/etc/* etc/ # 解挂载 cd .. sudo umount rootfs run /home/hyrtee/qemu/qemu-7.2.0/build/qemu-system-aarch64 \\ -machine virt -cpu cortex-a57 -machine type=virt -nographic -smp 4 -m 2048 \\ --kernel /home/hyrtee/qemu/linux-6.0.12/arch/arm64/boot/Image \\ --initrd /home/hyrtee/qemu/busybox-1.34.1/rootfs.img \\ --append \u0026#39;root=/dev/ram init=/linuxrc console=ttyAMA0 nokaslr\u0026#39; debug add -s -S at qemu boot parameters, run qemu.\n/home/hyrtee/qemu/qemu-7.2.0/build/qemu-system-aarch64 \\ -machine virt -cpu cortex-a57 -machine type=virt -nographic -smp 4 -m 2048 -s -S \\ --kernel /home/hyrtee/qemu/linux-6.0.12/arch/arm64/boot/Image \\ --initrd /home/hyrtee/qemu/busybox-1.34.1/rootfs.img \\ --append \u0026#39;root=/dev/ram init=/linuxrc console=ttyAMA0 nokaslr\u0026#39; open a new terminal, input:\ngdb-multiarch --ex \u0026#34;target remote:1234\u0026#34; (gdb) add-symbol-file ~/qemu/linux-6.0.12/vmlinux (gdb) b start_kernel (gdb) c Q\u0026amp;A VFS: Unable to mount root fs on unknown-block(1,0) you may need reconfig kernel, run make menuconfig at kernel root dir, then set the following config:\n-\u0026gt; Device Drivers │ -\u0026gt; Block devices \u0026lt;*\u0026gt; RAM block device support │ │ (16) Default number of RAM disks │ │ (131072) Default RAM disk size (kbytes) then set root=/dev/ram at kernel command line.\nRequested init /init failed (error -8) busybox should be built to Arm64 platform, instead x86-64 default. So rebuild and re-compile it.\nrefs https://www.expoli.tech/articles/2023/07/05/QEMU-debugging-Linux-kernel-environment-construction#8d170449343c448d8b2938544218c788\nhttps://ibug.io/blog/2019/04/os-lab-1/\nhttp://loverpi.wikidot.com/faq:sbc:libre-aml-s805x-minimal-rootfs\nhttp://loverpi.wikidot.com/faq:sbc:libre-aml-s805x-minimal-rootfs\n","date":"2023-07-22T08:47:57+08:00","permalink":"https://hyrtee.github.io/2023/debug-on-qemu/","title":"基于qemu+gdb，调试aarch64 linux内核"},{"content":"继之前在win11安装好wsl2之后，开始搭建aarch64工作环境，方便进行aarch64版本的Linux和ATF等代码调试。\nPreutils tools Gcc sudo apt-get install gcc Gcc-aarch64-linux-gnu sudo apt-get update sudo apt-get install gcc-aarch64-linux-gnu Dependency packages To install the essential packages followed, create a .sh bash file, write these apt commands to the file. Then, just run the bash. for example:\ntouch dependency-install.sh chmod a+x dependency-install.sh ./dependency-install.sh sudo apt-get install -y android-tools-adb sudo apt-get install -y android-tools-fastboot sudo apt-get install -y autoconf sudo apt-get install -y automake sudo apt-get install -y bc sudo apt-get install -y bison sudo apt-get install -y build-essential sudo apt-get install -y cscope sudo apt-get install -y curl sudo apt-get install -y device-tree-compiler sudo apt-get install -y expect sudo apt-get install -y flex sudo apt-get install -y ftp-upload sudo apt-get install -y gdisk sudo apt-get install -y iasl sudo apt-get install -y libattr1-dev sudo apt-get install -y libc6:i386 sudo apt-get install -y libcap-dev sudo apt-get install -y libcap-ng-dev sudo apt-get install -y libfdt-dev sudo apt-get install -y libftdi-dev sudo apt-get install -y libglib2.0-dev sudo apt-get install -y libhidapi-dev sudo apt-get install -y libncurses5-dev sudo apt-get install -y libpixman-1-dev sudo apt-get install -y libssl-dev sudo apt-get install -y libstdc++6:i386 sudo apt-get install -y libtool sudo apt-get install -y libz1:i386 sudo apt-get install -y make sudo apt-get install -y mtools sudo apt-get install -y netcat sudo apt-get install -y ninja-build sudo apt-get install -y python-crypto sudo apt-get install -y python-serial sudo apt-get install -y python-wand sudo apt-get install -y unzip sudo apt-get install -y uuid-dev sudo apt-get install -y xdg-utils sudo apt-get install -y xterm sudo apt-get install -y xz-utils sudo apt-get install -y zlib1g-dev special dependency For some special packages, it can\u0026rsquo;t be installed by apt. instead, manually.\nslirp # not forget to set gitlab ssh key git clone https://gitlab.freedesktop.org/slirp/libslirp.git cd libslirp sudo apt-get install meson meson build sudo ninja -C build install # check it ldconfig -p |grep slirp gdb sudo apt install gdb-multiarch qemu get source code. Here, I got version 7.2.0\nwget https://download.qemu.org/qemu-7.2.0.tar.xz tar -xvJf qemu-7.2.0.tar.xz configure\n./configure --target-list=aarch64-softmmu --enable-fdt --disable-kvm --disable-xen --enable-virtfs --enable-slirp build\nmake -j64 Q\u0026amp;A exchange apt source The following signatures couldn\u0026rsquo;t be verified because the public key is not available: NO_PUBKEY 3B4FE6ACC0B21F32\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32 refs https://www.qemu.org/download/\n","date":"2023-07-16T16:33:59+08:00","permalink":"https://hyrtee.github.io/2023/install-cross-compile-tools/","title":"搭建 aarch64 工作环境"},{"content":"以前在windows上都是通过VMware开Linux，不仅需要破解，还慢。既然有了WSL2这种好东西，不得用起来😏。\n之前在公司是装的WSL，结果好多功能用不了。。大意了，WSL2改进的不是一点点啊\nPS：虽然windows安装WSL2的博客无数，但最好还是学着从official website上一步步进行，博客类的仅供参考~\nInstall WSL command Open PowerShell or Windows Command Prompt in administrator，enter the following command, The \u0026ndash;install command performs the following actions:\nEnables the optional WSL and Virtual Machine Platform components\nDownloads and installs the latest Linux kernel\nSets WSL 2 as the default\nDownloads and installs the Ubuntu Linux distribution (reboot may be required)\nwsl --install Restart your windows\nChange the default Linux distribution installed see Linux distribution supported：\nwsl --list --online for example, install Ubuntu 22.04：\nwsl --install -d Ubuntu-22.04 set a user account and password at the same time.\ninstall successful\ncheck Linux and wsl verison\nwsl -l -v New Linux installations, installed using the wsl \u0026ndash;install command, will be set to WSL 2 by default.\ncustom shell style background image Settings → Profiles → Ubuntu 22.04.02 LTS → Additional settings → Appearance → Background image\noutput：\nmore setting options in Appearance, help yourself.\nmove wsl2 to other drives To unregister and uninstall a WSL distribution:\nwsl --unregister \u0026lt;DistributionName\u0026gt; move Ubuntu22.04 to D:/\nwsl --shutdown wsl --export Ubuntu-22.04 D:\\develop\\wsl2\\export.tar wsl --unregister Ubuntu-22.04 wsl --import Ubuntu-22.04 D:\\develop\\wsl2\\ubuntu22-04 D:\\develop\\wsl2\\export.tar --version 2 File storage open Windows File Explorer, enter:\\\\wsl$\nwhat\u0026rsquo;s more, you can also find your linux distribution in Linux beside File Explorer left-bar:\nQ\u0026amp;A Error code: xxx/0x80072ee2 科学上网\nrefs https://learn.microsoft.com/en-us/windows/wsl/install\n","date":"2023-07-16T09:06:51+08:00","permalink":"https://hyrtee.github.io/2023/install-wsl2-on-win11/","title":"Windows11 安装 WSL2"},{"content":"注册vercel账户 登录vercel，选择github账号作为Git provider。如果之前部署在gitlab，也可以使用gitlab。\nCreate Your Vercel Account → Hobby → input your name → Let\u0026rsquo;s connect your Git provider\n查了下，需要使用gmail、outlook等国外邮箱，好像163和qq都会blocked，毕竟vercel是国外网站？\ngithub → Settings → Emails，替换成gmail，verify一下：\nwhat？\n后面等待了一会儿，点击验证邮件中的链接，而不是按钮，verify success，真玄学\n随后选择 → Continue with email\nsuccess\n理论上说，之前的log in with email页面会立刻刷新并log in，但是无反应，且使用验证过的gmail登录时，报错We are unable to complete your signup. Please read this guide for further details，而用该gmail重新sign up时，又报The email address already exists. Log in?。无解，只能联系客服：registration@vercel.com。\n约两天后，官方回信，已解除限制：\n终于成功登录：\n导入Github仓库 选择首页的Create a New Project，又出现了熟悉的界面，此时就可以选择Continue with Github，毫无阻碍。\n如果github上没有安装vercel应用，则需要安装下：可授权所有仓库或部署的仓库\n一键部署 激动人心的时刻到了😃，导入username.github.io仓库之后，开始deploy。由于该仓库是Blog源码仓库的public目录，所以无需选择Framework Preset，默认Other，点击Deploy即可：\n出现礼花的时候，还是有点开心的🥳\n访问https://hyrtee-github-io.vercel.app/\nvercel 国内无法访问 试了一下，果然不能访问了，原因是vercel.app 被 DNS 污染（即被墙），目前在国内已经无法打开，官方那个针对有自定义域名的，给出了解决方案：\nA记录修改为： 76.223.126.88 cname记录修改为： cname-china.vercel-dns.com 奈何作者财力不够，还是老老实实用白嫖github吧，其实访问速度也还行.jpg🫥\nRefs https://www.techxiaofei.com/post/hugo/hugo_vercel/\nhttps://segmentfault.com/a/1190000040063325\n","date":"2023-07-09T08:31:37+08:00","permalink":"https://hyrtee.github.io/2023/move-to-vercel/","title":"Github + Vercel静态部署博客"},{"content":"预置条件 kernel开启相关配置项：\nCONFIG_9P_FS=y CONFIG_9P_FS_POSIX_ACL=y CONFIG_9P_FS_SECURITY=y CONFIG_NETWORK_FILESYSTEMS=y CONFIG_NET_9P=y CONFIG_NET_9P_DEBUG=y CONFIG_NET_9P_VIRTIO=y CONFIG_PCI=y CONFIG_PCI_HOST_COMMON=y CONFIG_PCI_HOST_GENERIC=y CONFIG_VIRTIO_PCI=y CONFIG_VIRTIO_BLK=y CONFIG_VIRTIO_NET=y CONFIG_VIRTIO_MMIO=y CONFIG_FUSE_FS=y CONFIG_VIRTIO_FS=y CONFIG_VIRTIO_INPUT=y 宿主机支持相关库\nsudo apt install -y libcap-dev sudo apt install -y libattr sudo apt install -y libattr-dev qemu编译支持virtfs\n./configure --target-list=aarch64-softmmu --enable-kvm --enable-virtfs --enable-slirp --enable-debug 执行步骤 path/to/share：设置成自己在宿主机的要共享的目录\nqemu-system-aarch64 \\ -M virt,secure=on -m 4G -nographic \\ -machine firmware=bl31.bin \\ -fsdev local,id=shareid,path=/path/to/share,security_model=none \\ -device virtio-9p-device,fsdev=shareid,mount_tag=share \\ -device loader,addr=0x1002000000,file=tee.elf \\ --kernel Image \\ --initrd rootfs.cpio.gz ","date":"2023-06-24T18:25:36+08:00","permalink":"https://hyrtee.github.io/2023/qemu-9pfs/","title":"qemu使用9pfs共享宿主机文件"},{"content":"搭建环境 操作系统：windows 10 开发工具：vscode、Git 搭建思路 使用四个仓库，管理Blog，分别是：\n源仓库：private，托管所有配置文件 发布仓库：public，托管Github pages内容仓库 主题仓库：public，托管当前使用的主题自定义内容 评论仓库：public，托管blog文章评论信息 使用Github Action：当源仓库有push时，自动生成静态页面到username.github.io域名下\n安装 hugo 由于Stack要求SCSS 和 TypeScript，所以需要下载extend版本：Releases · gohugoio/hugo · GitHub\nStack要求hugo最低版本 → theme\u0026rsquo;s theme.toml file\n安装完成后，重启terminal，check version： 新建 site 选择 or 新建一个文件夹，用于管理自己的blog，作者使用的是D:\\code\\blog新建site，拉取stack作为module：\nhugo new site hugostack cd hugostack git init git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 将themes/hugo-theme-stack/exampleSite子目录下的文件拷贝到根目录下：\ncp -r themes/hugo-theme-stack/exampleSite/* ./ # 删除根目录下默认的配置文件，不同hugo版本各有不同：hugo.toml/config.yaml rm hugo.toml 尝试本地运行\nhugo server -D bug 1：languages.en.description: custom params on the language top level is deprecated and will be removed in a future release.\nWARN 2023/06/23 10:15:21 config: languages.en.description: custom params on the language top level is deprecated and will be removed in a future release. Put the value below [languages.en.params]. See https://gohugo.io/content-management/multilingual/#changes-in-hugo-01120 Re-run Hugo with the flag --panicOnWarning to get a better error message. WARN 2023/06/23 10:15:21 config: languages.zh-cn.description: custom params on the language top level is deprecated and will be removed in a future release. Put the value below [languages.zh-cn.params]. See https://gohugo.io/content-management/multilingual/#changes-in-hugo-01120 Re-run Hugo with the flag --panicOnWarning to get a better error message. WARN 2023/06/23 10:15:21 config: languages.ar.description: custom params on the language top level is deprecated and will be removed in a future release. Put th Re-run Hugo with the flag --panicOnWarning to get a better error message. 解决：大致含义是新的hugo版本会逐渐舍弃自定义language参数，所以将config.yaml中的language中的title和description字段，以及语言ar去掉：\nlanguages: en: languageName: English weight: 1 zh-cn: languageName: 中文 weight: 2 bug 2：error calling partial: partial \u0026ldquo;article/article.html\u0026rdquo; timed out after 30s. This is most likely due to infinite recursion. If this is just a slow template, you can try to increase the \u0026rsquo;timeout\u0026rsquo; config setting.\nERROR 2023/06/23 10:46:27 render of \u0026#34;home\u0026#34; failed: \u0026#34;D:\\code\\blog\\hugostack\\themes\\hugo-theme-stack\\layouts\\index.html:9:15\u0026#34;: execute of template failed: template: index.html:9:15: executing \u0026#34;main\u0026#34; at \u0026lt;partial \u0026#34;article-li15: executing \u0026#34;main\u0026#34; at \u0026lt;partial \u0026#34;article-list/default\u0026#34; .\u0026gt;: error calling partial: \u0026#34;D:\\code\\blog\\hugostack\\themes\\hugo-theme-stack\\layouts\\partials\\article-list\\default.html:3:rtials/article-list/default.html:3:7: execut7\u0026#34;: execute of template failed: template: partials/article-list/default.html:3:7: executing \u0026#34;partials/article-list/default.html\u0026#34; at \u0026lt;partial \u0026#34;article/components/header\u0026#34; .\u0026gt;: erricle\\components\\header.html:34:7\u0026#34;: execute oor calling partial: \u0026#34;D:\\code\\blog\\hugostack\\themes\\hugo-theme-stack\\layouts\\partials\\article\\components\\header.html:34:7\u0026#34;: execute of template failed: template: partials/articl.RelPermalink\u0026gt;: error calling partialCached:e/components/header.html:34:7: executing \u0026#34;partials/article/components/header.html\u0026#34; at \u0026lt;partialCached \u0026#34;article/components/details\u0026#34; . .RelPermalink\u0026gt;: error calling partialCached: config setting. partial \u0026#34;article/components/details\u0026#34; timed out after 30s. This is most likely due to infinite recursion. If this is just a slow template, you can try to increase the \u0026#39;timeout\u0026#39; config setting. of template failed: template: _default/sing Built in 30147 ms nite recursion. If this is just a slow templ Error: error building site: render: failed to render pages: render of \u0026#34;page\u0026#34; failed: \u0026#34;D:\\code\\blog\\hugostack\\themes\\hugo-theme-stack\\layouts\\_default\\single.html:27:7\u0026#34;: execute of template failed: template: _default/single.html:27:7: executing \u0026#34;main\u0026#34; at \u0026lt;partial \u0026#34;article/article.html\u0026#34; .\u0026gt;: error calling partial: partial \u0026#34;article/article.html\u0026#34; timed out after 30s. This is most likely due to infinite recursion. If this is just a slow template, you can try to increase the \u0026#39;timeout\u0026#39; config setting. 解决：\n首先，科学上网\n其次，在根目录的config.yaml中添加timeout字段，默认是30s，增大到10m：\n# large timeout timeout : \u0026#34;10m\u0026#34; success！\n关联仓库 本地已有源仓库和主题仓库，需要将其关联到远程：\n远程源仓库：新建一个，设置属性为private，如：/username/hugostack.git\n远程主题仓库：fork之前submodule的主题仓库到自己的github\n# 关联到远程 git remote add origin https://github.com/username/hugostack.git cd themes/hugo-theme-stack/ git remote set-url origin https://github.com/username/hugo-theme-stack.git 测试push\ngit push -u origin master cd themes/hugo-theme-stack/ git push 设置Github Action 远程新建发布仓库，命名为：username.github.io。这里的username是github的用户名，必须保持一致！\n本地源仓库下：\n设置config.yaml中的baseurl为：https://username.github.io 新建文件夹和文件：.github/workflows/deploy-site.yaml，填入如下内容： name: deploy on: push: branches: [\u0026#34;master\u0026#34;] workflow_dispatch: # schedule: # # Runs everyday at 8:00 AM # - cron: \u0026#34;0 0 * * *\u0026#34; # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow one concurrent deployment concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: true # Default to bash defaults: run: shell: bash jobs: # BUild job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.113.0 TZ: America/Los_Angeles steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo id: pages uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.113.0\u0026#39; extended: true - name: Build Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: hugo --minify - name: Deploy Web id: deployment uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: hyrtee/hyrtee.github.io PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} push到远程\nbug 3：refusing to allow an OAuth App to create or update workflow .github/workflows/deploy-site.yaml without workflow scope\n解决：暂时删除本地的.github/workflows/deploy-site.yaml，包括文件夹，先将其他修改push到远程，随后在github源仓库的Action页面下，新建一个workflows，将上面的deploy-site.yaml内容粘贴到其中。\nbug 4：执行Action失败，Action failed with \u0026ldquo;not found deploy key or tokens\u0026rdquo;\n解决：\n新建一个token，enable repo和workflow，复制token。\n在源仓库的Settings - Secrets and variables - Actions中，添加一个secret，将之前新建的token复制其中\nAction下rerun之前的job：\n访问https://hyrtee.github.io/，success！\n自定义 Blog Style 左侧信息栏 头像 根目录下新建assets/img，添加自己的头像img，随后修改对应config文件的img名称：src\nsidebar: emoji: 🍥 subtitle: MARiA? yyds! avatar: enabled: true local: true src: img/avatar.png 社交social 自定义图标，iconfont 下载，颜色#2c3e50，大小24，格式svg。下载后放到assets\\icons\nsocial: - identifier: github name: GitHub url: https://github.com/hyrtee weight: 1 params: icon: img-name 注意：将下载的img中的svg的所有#2c3e50改成currentColor，否则切换为黑色模式，图标颜色不能自动切换，因为优先使用内部定义的color\n文档 Emoji config中添加如下内容\n# Enable global emoji support enableEmoji: true 随后直接在文章的md文档中添加emoji id即可显示，查询id：emoji-cheat-sheet\nLanguage 如果只想保持一种语言，则config中的language只保留一种语言，如中文：\nlanguages: zh-cn: languageName: 中文 weight: 1 评论 使用utterances，操作简单：\ngithub新建一个评论仓库hyrteeblogtalks github安装utterances，并关联上面的评论仓库 修改config.yaml comments: enabled: true provider: utterances disqusjs: shortname: apiUrl: apiKey: admin: adminLabel: utterances: repo: hyrtee/hyrteeblogtalks issueTerm: title theme: github-light 效果： 统计分析 使用不蒜子工具，使用简单，只需导入两行代码，官网是这么说的，实际DIY也还行。\n导入busuanzi js脚本 在layouts\\partials\\head\\head.html文件末尾：\n\u0026lt;!-- busuanzi --\u0026gt; {{- if .Site.Params.busuanzi.enable -}} \u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;meta name=\u0026#34;referrer\u0026#34; content=\u0026#34;no-referrer-when-downgrade\u0026#34;\u0026gt; {{- end -}} 全局统计 底部显示本站总访问量和访客数，在layouts\\partials\\footer\\footer.html文件：\n\u0026lt;section class=\u0026#34;copyright\u0026#34;\u0026gt; \u0026amp;copy; \u0026lt;!-- {{ if and (.Site.Params.footer.since) (ne .Site.Params.footer.since (int (now.Format \u0026#34;2006\u0026#34;))) }} {{ .Site.Params.footer.since }} - {{ end }} --\u0026gt; {{ now.Format \u0026#34;2006\u0026#34; }} \u0026lt;a href=\u0026#34;https://stack-theme-mod.vercel.app/\u0026#34;\u0026gt;Hyrtee\u0026lt;/a\u0026gt;\u0026lt;i class=\u0026#34;fas fa-bell\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; ·\u0026lt;i class=\u0026#34;fas fa-bell\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;a id=\u0026#34;days\u0026#34;\u0026gt;0\u0026lt;/a\u0026gt;Days\u0026lt;br\u0026gt; {{$var := $scratch.Get \u0026#34;total\u0026#34;}}{{$var = div $var 100.0}}{{$var = math.Ceil $var}}{{$var = div $var 10.0}}共书写了{{$var}}k字·共 {{ len (where .Site.RegularPages \u0026#34;Section\u0026#34; \u0026#34;post\u0026#34;) }}篇文章 \u0026lt;!-- 以上是文件原内容，以下是添加部分 --\u0026gt; \u0026lt;!-- insert busuanzi --\u0026gt; {{ if .Site.Params.busuanzi.enable -}} \u0026lt;div class=\u0026#34;busuanzi-footer\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_container_site_pv\u0026#34;\u0026gt; 本站总访问量\u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;次 \u0026lt;/span\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_container_site_uv\u0026#34;\u0026gt; 本站访客数\u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;人次 \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; {{- end -}} \u0026lt;/section\u0026gt; 效果： 单个文章统计 头部显示文章阅读量，layouts\\partials\\article\\components\\details.html文件的footer内结尾：\n{{ if .Site.Params.article.readingTime }} \u0026lt;div\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;clock\u0026#34; }} \u0026lt;time class=\u0026#34;article-words\u0026#34;\u0026gt; {{ .WordCount }}字 \u0026lt;/time\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;!-- 以上是文件原内容，以下是添加部分 --\u0026gt; \u0026lt;!-- busuanzi --\u0026gt; {{ if .Site.Params.busuanzi.enable -}} \u0026lt;div class=\u0026#34;article-analysic\u0026#34;\u0026gt;\u0026amp;nbsp \u0026lt;!-- 这里的read图标，可自行前往iconfont下载 --\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;read\u0026#34; }} \u0026lt;time class=\u0026#34;article-words\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_container_page_pv\u0026#34;\u0026gt;\u0026lt;span id=\u0026#34;busuanzi_value_page_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026amp;nbsp阅读\u0026lt;/span\u0026gt; \u0026lt;/time\u0026gt; \u0026lt;/div\u0026gt; {{- end }} 原版可能需要在themes/stack/layouts/_default/single.html中修改 技巧：无论使用什么版本的stack，默认情况下，单篇文章顶部都会显示字数或需要阅读几分钟，所以vscode搜\u0026quot;字\u0026quot;或\u0026quot;分钟\u0026quot;等关键字，看对应代码在哪个文件，就在哪里添加以上代码，屡试不爽！ 效果： 让谷歌\u0026amp;百度搜到我 谷歌 获取谷歌分析ID 首先前往谷歌分析官网，获取Measurement ID，具体操作跟随网站指引即可，名称随意，最终获得一个G-开头的Measurement ID。 打开config.yaml配置文件，找到googleAnalytics配置项，填入你的Measurement ID。\n提交站点地图 站点地图(sitemap)一般是一个XML文件，就是告诉搜索引擎，你的网站有哪些页面，让他来爬取你。Hugo会在生成和部署网站时在public文件夹根目录下自动生成sitemap.xml文件。\n登录谷歌搜索控制台。在验证所有权的选项中选择“Google Analytics”。\n然后点击侧边栏的【站点地图】页面就可以提交我们主页的站点地图URL: 百度 获取js脚本 登陆百度统计主页 ，按照指引，添加网站、获取统计代码。将代码放到themes/hugo-theme-stack/layouts/partials/head/head.html最后，一次性安装，全站皆可被搜索到。如作者：\n\u0026lt;script\u0026gt; var _hmt = _hmt || []; (function() { var hm = document.createElement(\u0026#34;script\u0026#34;); hm.src = \u0026#34;https://hm.baidu.com/hm.js?c376f3e13b35b80fa5d4695e8dd859b1\u0026#34;; var s = document.getElementsByTagName(\u0026#34;script\u0026#34;)[0]; s.parentNode.insertBefore(hm, s); })(); \u0026lt;/script\u0026gt; 提交站点视图 登陆百度搜索资源平台 添加站点，下载验证文件，然后把验证文件放在网站public文件夹内。点击“验证”即可。 选择左侧菜单→普通收录→sitemap→提交站点地图URL 可能由于博客刚建立，被认为是低质站点，过几天再来看看。。。😭😭😭\n使用魔改的stack 偶然发现一个使用stack的博主使用了某位大佬的魔改stack版本，觉得还不错，就升级了一下。相比之前，有以下变化：\n调整文章页面为三栏显示（代码来自ShadowySpirits） 文章按年份分类 增加文章字数统计与站点总字数、总篇数显示 修改全站字体为思源宋体 增加一个引用短代码（短代码来自荷戟独彷徨） 添加一个友情链接页面并设置为双栏（友情链接代码来自Bore，双栏代码来自BB_Roin） 一系列基于个人美观喜好的CSS修改 右侧栏增加Categories小部件 仓库的readme已说明需要修改的点，如头像和底部博客创建天数等。 作者直接替换掉content，按照readme说明修改。\nbug 5：小改之后，出现底部部分信息不显示问题：\n原版： 魔改版： 解决：直接替换themes/下的stack为之前的最新版本，若文件夹名称修改，需要同步到config.yaml中开头的theme字段 Q\u0026amp;A 运行hugo server -w时, 统计异常 测试时，显示几百万的访问量无碍，正式部署到github pages后，就显示正常了。\nrefs https://stack.jimmycai.com/\n如何用 GitHub Pages + Hugo 搭建个人博客\nhttps://blog.reincarnatey.net/2023/build-hugo-blog-with-stack-mod/\nhttps://blog.kanikig.xyz/hugo-busuanzi/\n","date":"2023-06-24T11:11:25+08:00","permalink":"https://hyrtee.github.io/2023/start-blog/","title":"hugo+Stack 搭建个人博客"}]